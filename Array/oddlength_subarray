Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.
A subarray is a contiguous subsequence of the array.

Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58


class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        s=0
        for i in range(len(arr)):
            for j in range(i,len(arr),2):
                s +=sum(arr[i:j+1])
        return s


# Example input
arr = [1, 4, 2, 5, 3]

# Explanation of iterations
s = 0

# i = 0, j = 0, arr[0:1] = [1], sum = 1
s += sum(arr[0:1])  # s = 1

# i = 0, j = 2, arr[0:3] = [1, 4, 2], sum = 7
s += sum(arr[0:3])  # s = 8

# i = 0, j = 4, arr[0:5] = [1, 4, 2, 5, 3], sum = 15
s += sum(arr[0:5])  # s = 23

# i = 2, j = 2, arr[2:3] = [2], sum = 2
s += sum(arr[2:3])  # s = 25

# i = 2, j = 4, arr[2:5] = [2, 5, 3], sum = 10
s += sum(arr[2:5])  # s = 35

# i = 4, j = 4, arr[4:5] = [3], sum = 3
s += sum(arr[4:5])  # s = 38

# Final output
print(s)  # Output: 38
