arr = [4,33,2,15,1]
n= len(arr)-1
for i in range(0,n):
    for j in range(0,n):
        if arr[j] > arr[j+1]:
            arr[j],arr[j+1] = arr[j+1],arr[j]
    n=n-1
print(arr)

Bubble Sort has a time complexity of O(n^2) in the worst and average cases, making it inefficient for large lists. However, it 
is easy to implement and understand, making it useful for 
educational purposes or for small lists where efficiency is not a primary concern.


Bubble Sort is a simple sorting algorithm with a time complexity of O(n^2) in the worst and average cases, which makes it inefficient for large datasets. As a result, it is generally not used in most real-time applications where efficiency is crucial. However, there
are certain scenarios where Bubble Sort might still find some limited practical use or can be used for educational purposes. Let's explore some of these cases:

Teaching Tool:
Bubble Sort can be an excellent educational tool for teaching basic sorting concepts to students or newcomers to programming. Its simplicity and ease of understanding make it a great starting point to grasp the fundamentals of sorting algorithms.

Small Datasets:
Bubble Sort might be useful when dealing with small datasets, especially when efficiency is not a primary concern. For instance, if you have a small array of elements that needs to be sorted in real-time and speed is not critical, Bubble Sort could be sufficient.

Nearly Sorted Data:
When the data is already partially sorted or nearly sorted, Bubble Sort's adaptive nature can be advantageous. The algorithm will detect that fewer swaps are needed, potentially making it faster than its worst-case time complexity.

Embedded Systems with Limited Resources:
In some resource-constrained environments, such as certain embedded systems with very limited memory and processing power, using a more complex and memory-intensive sorting algorithm might not be feasible. Bubble Sort's simplicity and minimal resource requirements could make it a reasonable choice in such cases.

Learning Algorithms and Debugging:
During the development process of complex sorting algorithms or for debugging purposes, Bubble Sort can be used as a baseline comparison to validate the correctness and efficiency of more sophisticated sorting algorithms.

It's important to note that in most real-time applications and large-scale systems, more efficient sorting algorithms such as QuickSort, MergeSort, or HeapSort are preferred due to their superior performance. Nonetheless, understanding Bubble Sort can still be valuable for algorithm analysis and as a starting point to explore more advanced sorting techniques.
