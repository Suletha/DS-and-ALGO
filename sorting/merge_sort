Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), 
while the positions of other numbers are changed (for example, 1 and 5).

class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge_sort(nums):
            if len(nums) <= 1:
                return nums

            mid = len(nums) // 2
            left_half = nums[:mid]
            right_half = nums[mid:]

            left_half = merge_sort(left_half)
            right_half = merge_sort(right_half)

            return merge(left_half, right_half)

        def merge(left, right):
            result = []
            left_ptr, right_ptr = 0, 0

            while left_ptr < len(left) and right_ptr < len(right):
                if left[left_ptr] < right[right_ptr]:
                    result.append(left[left_ptr])
                    left_ptr += 1
                else:
                    result.append(right[right_ptr])
                    right_ptr += 1

            result.extend(left[left_ptr:])
            result.extend(right[right_ptr:])

            return result

        return merge_sort(nums)
