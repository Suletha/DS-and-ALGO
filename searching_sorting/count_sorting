def counting_sort(arr):
    max_val = max(arr)
    min_val = min(arr)
    range_val = max_val - min_val + 1

    count = [0] * range_val
    output = [0] * len(arr)

    for j in arr:
        count[j - min_val] += 1

    for i in range(1, len(count)):
        count[i] += count[i - 1]

    for i in range(len(arr) - 1, -1, -1):
        output[count[arr[i] - min_val] - 1] = arr[i]
        count[arr[i] - min_val] -= 1

    arr[:] = output

# Example usage
arr = [4, 2, 2, 8, 3, 3, 1]
counting_sort(arr)
print(arr)  # Output: [1, 2, 2, 3, 3, 4, 8]


Step 1: Populate the count array

Initial count array: [0, 0, 0, 0, 0, 0, 0, 0]
After the loop:
j = 4, count[4 - 1] += 1 (index 3) -> [0, 0, 0, 1, 0, 0, 0, 0]
j = 2, count[2 - 1] += 1 (index 1) -> [0, 1, 0, 1, 0, 0, 0, 0]
j = 2, count[2 - 1] += 1 (index 1) -> [0, 2, 0, 1, 0, 0, 0, 0]
j = 8, count[8 - 1] += 1 (index 7) -> [0, 2, 0, 1, 0, 0, 0, 1]
j = 3, count[3 - 1] += 1 (index 2) -> [0, 2, 1, 1, 0, 0, 0, 1]
j = 3, count[3 - 1] += 1 (index 2) -> [0, 2, 2, 1, 0, 0, 0, 1]
j = 1, count[1 - 1] += 1 (index 0) -> [1, 2, 2, 1, 0, 0, 0, 1]
Step 2: Update the count array

After the loop:
count[1] += count[0] -> [1, 3, 2, 1, 0, 0, 0, 1]
count[2] += count[1] -> [1, 3, 5, 1, 0, 0, 0, 1]
count[3] += count[2] -> [1, 3, 5, 7, 0, 0, 0, 1]
count[4] += count[3] -> [1, 3, 5, 7, 7, 0, 0, 1]
count[5] += count[4] -> [1, 3, 5, 7, 7, 7, 0, 1]
count[6] += count[5] -> [1, 3, 5, 7, 7, 7, 7, 1]
count[7] += count[6] -> [1, 3, 5, 7, 7, 7, 7, 8]
Step 3: Build the output array

Looping in reverse:
Iteration 1: i = 6, arr[i] = 1, count[arr[i] - min_val] - 1 = count[1 - 1] - 1 = 0 - 1 = -1, output[-1] = 1, count[1 - 1] -= 1 -> [0, 3, 5, 7, 7, 7, 7, 8]
Iteration 2: i = 5, arr[i] = 3, count[arr[i] - min_val] - 1 = count[3 - 1] - 1 = 5 - 1 = 4, output[4] = 3, count[3 - 1] -= 1 -> [0, 3, 5, 6, 7, 7, 7, 8]
Iteration 3: i = 4, arr[i] = 3, count[arr[i] - min_val] - 1 = count[3 - 1] - 1 = 6 - 1 = 5, output[5] = 3, count[3 - 1] -= 1 -> [0, 3, 5, 6, 7, 6, 7, 8]
Iteration 4: i = 3, arr[i] = 8, count[arr[i] - min_val] - 1 = count[8 - 1] - 1 = 7 - 1 = 6, output[6] = 8, count[8 - 1] -= 1 -> [0, 3, 5, 6, 7, 6, 6, 8]
Iteration 5: i = 2, arr[i] = 2, count[arr[i] - min_val] - 1 = count[2 - 1] - 1 = 3 - 1 = 2, output[2] = 2, count[2 - 1] -= 1 -> [0, 3, 4, 6, 7, 6, 6, 8]
Iteration 6: i = 1, arr[i] = 2, count[arr[i] - min_val] - 1 = count[2 - 1] - 1 = 4 - 1 = 3, output[3] = 2, count[2 - 1] -= 1 -> [0, 3, 4, 5, 7, 6, 6, 8]
Iteration 7: i = 0, arr[i] = 4, count[arr[i] - min_val] - 1 = count[4 - 1] - 1 = 7 - 1 = 6, output[6] = 4, count[4 - 1] -= 1 -> [0, 3, 4, 5, 7, 6, 5, 8]
After the loops, the arr is updated to [1, 2, 2, 3, 3, 4, 8], which is the sorted result of the initial array [4, 2, 2, 8, 3, 3, 1].
