You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 
Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

def removeDuplicates(s: str) -> str:
    stack = []                             # Initialize a stack to store characters
    
    for char in s:
        if stack and stack[-1] == char:
            stack.pop()                   # Remove the last element from the stack if it's equal to the current character
        else:
            stack.append(char)               # Otherwise, add the current character to the stack
    
    return ''.join(stack)                    # Convert the stack back to a string

# Example usage
input_str = "abbaca"
result = removeDuplicates(input_str)
print(result)                            # Output: "ca"

