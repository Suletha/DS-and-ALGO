Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:

Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.


class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        n = len(nums)
        result = [-1] * n
        stack = []

    
        for i in range(2 * n):
            while stack and nums[stack[-1]] < nums[i % n]:
                result[stack.pop()] = nums[i % n]
            stack.append(i % n)

        return result
method:

n = len(nums)
        nge = [-1] * n
        stack = []

        for i in range(2*n - 1, -1, -1):

            while stack and stack[-1] <= nums[i % n]:
                stack.pop()

            if i <= (n - 1):
                if stack:
                    nge[i] = stack[-1]

                else:
                    nge[i] = -1

            stack.append(nums[i % n])

        return nge


Initially, n = 5 (length of nums), and stack and result are empty and [-1, -1, -1, -1, -1] respectively.

Loop begins: i ranges from 0 to 2 * n - 1 = 9.

i = 0:

stack is empty.
The condition while stack and nums[stack[-1]] < nums[i % n] is not met, so we proceed to stack.append(i % n), which adds 0 to the stack.
i = 1:

stack contains [0].
The condition while stack and nums[stack[-1]] < nums[i % n] is not met, so we proceed to stack.append(i % n), which adds 1 to the stack.
... and so on for all values of i.

i = 4:
stack contains [0, 1, 2, 3].
The condition while stack and nums[stack[-1]] < nums[i % n] is met for index 3 (value 4 in nums) and index 2 (value 3 in nums). Since 4 is greater than 3, it means that 4 is the next greater element for both elements.
The line result[stack.pop()] = nums[i % n] updates result[3] = 4 and result[2] = 4, effectively marking that the next greater element for indices 3 and 2 is 4.
... and so on for the remaining values of i.

After the loop ends, stack contains [0, 1, 2, 4], and result is [2, 3, 4, -1, 4], which represents the next greater elements for each element in the nums list.

In summary, the code iterates through each index i (circularly) in nums, while maintaining a stack of indices in descending order of the corresponding values. When a larger value is encountered, the loop processes the indices in the stack and marks them with the current value. This way, the resulting result list contains the next greater elements for each element in the nums list.






    
