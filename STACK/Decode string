Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

 

Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"


class Solution:
    def decodeString(self, s: str) -> str:
        stack=[]

        for c in s:
            if c!=']':
                stack.append(c)
            else:
                res=''
                while stack[-1]!='[':
                    res+=stack.pop()
                stack.pop()
                n=''
                while len(stack)!=0 and stack[-1].isdigit()==True:
                    n+=stack.pop()
                stack.append(res*int(n[::-1]))

        return ''.join([word[::-1] for word in stack])



class Solution:: Defines a class named Solution.

def decodeString(self, s: str) -> str:: Defines the decodeString method inside the class. It takes a string s as input and returns a string.

stack=[]: Initializes an empty list named stack. This will be used as a stack to process the decoding.

for c in s:: Iterates through each character c in the input string s.

if c!=']':: Checks if the current character is not ']'.

stack.append(c): If the character is not ']', it's added to the stack.

else:: Executes when the current character is ']'. This marks the start of the decoding process for an enclosed substring.

res='': Initializes an empty string res to store the decoded substring.

while stack[-1]!='[':: Enters a loop that continues as long as the top character of the stack is not '['. This loop collects characters from the stack and forms the enclosed substring.

res+=stack.pop(): Pops the top character from the stack and appends it to the res string.

stack.pop(): Pops the '[' character from the stack, marking the end of the enclosed substring.

n='': Initializes an empty string n to store the extracted number 'k' from the encoded substring.

while len(stack)!=0 and stack[-1].isdigit()==True:: Enters a loop that continues as long as the stack is not empty and the top character of the stack is a digit (part of the multiplier 'k').

n+=stack.pop(): Pops the top character from the stack and adds it to the n string. This constructs the complete number 'k' as a string.

stack.append(res*int(n[::-1])): Calculates the repeated substring by converting n to an integer and repeating the res substring. The result is then pushed back onto the stack.

return ''.join([word[::-1] for word in stack]): Joins the characters in the stack to form the final decoded string. It iterates through each word (substring) in the stack and reverses them before joining.

solution = Solution(): Creates an instance of the Solution class.

input_str = "3[a]2[bc]": Defines the input string.

result = solution.decodeString(input_str): Calls the decodeString method on the instance of the Solution class with the input string.

print(result): Prints the final decoded string. In this example, the output will be "aaabcbc".
