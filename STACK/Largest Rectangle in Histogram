Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units


class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        max_area = 0
        stack = []
        for i, h in enumerate(heights):
            start = i
            while stack and stack[-1][1] > h:
                index, height = stack.pop()
                max_area = max(max_area,height*(i-index))
                start = index
            stack.append((start, h))

        for i, h in stack:
            max_area = max(max_area, h*(len(heights)-i))
        return max_area


Initialize stack ‘S’ and push the top index of A[] onto ‘S’
Traverse via A[] and compare the height of each element with the height of each element on top of ‘S’
If A[i]>= A[S.top()], then push it into the S
Else A[i] <= A[S.top()], then pop the elements until A[i]>= A[S.top()]
This ensures that A[S.top()] stays at its maximum height as elements are being added to it from above and below
Lastly, push i for every item currently on S into the stack, followed by popping from S until S has no elements left in it.
Return maximum element
