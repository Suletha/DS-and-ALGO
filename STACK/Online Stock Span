Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.

The span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.

For example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.
Also, if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.


class StockSpanner:

    def __init__(self):
        self.stack = []
        

    def next(self, price: int) -> int:
        span = 1
        while self.stack and self.stack[-1][0] <= price:
            element = self.stack.pop()
            span += element[1]

        self.stack.append((price,span))
        return span
        


class StockSpanner:

    def __init__(self):
        self.stack = []
class StockSpanner:: This defines a class named StockSpanner.
def __init__(self):: This is the constructor method for the class. It initializes the object's attributes. In this case, it initializes an empty stack to store prices and their spans.
python
Copy code
    def next(self, price: int) -> int:
        span = 1
def next(self, price: int) -> int:: This is a method that takes an integer price as an argument and is expected to return an integer (the span of the stock's price).
span = 1: Initializes a variable span with a value of 1. This variable will be used to keep track of the span of the current price.
python
Copy code
        while self.stack and self.stack[-1][0] <= price:
            element = self.stack.pop()
            span += element[1]
while self.stack and self.stack[-1][0] <= price:: This starts a loop that continues as long as the stack is not empty and the top element of the stack (which is a tuple representing a previous price and span) has a price less than or equal to the current price.
element = self.stack.pop(): Inside the loop, this line pops the top element (a tuple) from the stack and assigns it to the element variable. The tuple contains the previous price and span.
span += element[1]: This adds the span from the popped element to the current span. The element[1] represents the span of the previous price.
python
Copy code
        self.stack.append((price, span))
        return span
self.stack.append((price, span)): After the loop, this line appends a new tuple to the stack containing the current price and the calculated span.
return span: Finally, the method returns the calculated span.
This implementation uses a stack to keep track of the prices and their spans. It iterates through the stack, popping prices and updating the span until it finds a price greater than the current price. Then, it calculates and returns the span for the current price.

Note: This explanation assumes a correct environment and proper usage of the code. If you encounter any issues, please let me know, and I'll be happy to assist furthe
