Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9


class Solution:
    def trap(self, arr: List[int]) -> int:
        res = 0
        lhb = arr[0]
        rhb = arr[len(arr) - 1]
        l = 0
        r = len(arr) - 1
        while l <= r:
            if lhb <= rhb:
                if arr[l] >= lhb:
                    lhb = arr[l]
                else:
                    res = res + lhb - arr[l]
                l = l + 1
            else:
                if arr[r] >= rhb:
                    rhb = arr[r]
                else:
                   res = res + rhb - arr[r]
                r = r - 1
        return res

method:2

class Solution:
    def trap(self, height: List[int]) -> int:
        if not height:
            return 0
        
        res = 0
        left_max = [0] * len(height)
        right_max = [0] * len(height)
        
        left_max[0] = height[0]
        for i in range(1, len(height)):
            left_max[i] = max(left_max[i - 1], height[i])
        
        right_max[len(height) - 1] = height[len(height) - 1]
        for i in range(len(height) - 2, -1, -1):
            right_max[i] = max(right_max[i + 1], height[i])
        
        for i in range(len(height)):
            res += min(left_max[i], right_max[i]) - height[i]
        
        return res

# Create an instance of the Solution class
solution = Solution()

# Given input
height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]

# Calculate and print the trapped water amount
print(solution.trap(height))  # Output: 6
 
