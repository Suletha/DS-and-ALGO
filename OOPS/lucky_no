Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.

Return the largest lucky integer in the array. If there is no lucky integer return -1.

 

Example 1:

Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.
Example 2:

Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.


class Solution:
    def findLucky(self, arr: List[int]) -> int:
        freq_dict = {}
        for i in arr:
            freq_dict[i] = freq_dict.get(i,0) + 1
        largest_lucky = -1
        for i, freq in freq_dict.items():
            if i == freq and i >  largest_lucky :
                largest_lucky = i
        return  largest_lucky 


Sure, let's go through the steps using an example to find the largest lucky integer in the array.

Example array: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]

Step 1: Create a dictionary to store the frequency of each integer:

Initially, the freq_dict is empty.
Step 2: Count the occurrences of each integer in the array:

Start iterating through the array:
The first element is 1. Add it to the freq_dict with a frequency of 1: freq_dict = {1: 1}
The next element is 2. Since 2 is not in the freq_dict yet, add it with a frequency of 1: freq_dict = {1: 1, 2: 1}
The next element is another 2. Now, 2 is already in the freq_dict, so we increment its frequency: freq_dict = {1: 1, 2: 2}
The next element is 3. Since 3 is not in the freq_dict, add it with a frequency of 1: freq_dict = {1: 1, 2: 2, 3: 1}
The next element is another 3. Increment the frequency of 3: freq_dict = {1: 1, 2: 2, 3: 2}
The next element is another 3. Increment the frequency of 3 again: freq_dict = {1: 1, 2: 2, 3: 3}
Continue the process for the remaining elements.
After completing the iteration, the freq_dict will be: {1: 1, 2: 2, 3: 3, 4: 4}. This dictionary stores the frequency of each integer in the array.

Step 3: Find the largest lucky integer:

Initialize the variable largest_lucky to -1.
Iterate through the items in the freq_dict (i.e., the key-value pairs):
For each key-value pair, check if the key (integer value) is equal to its corresponding value (frequency).
If the condition is true, it means the key is a lucky integer.
If the lucky integer found is larger than the current largest_lucky, update largest_lucky to the new lucky integer.
In our example, the largest_lucky starts with -1, and during the iteration, the following checks are made:

For 1, the frequency is 1, and 1 == 1, so it's a lucky integer. Update largest_lucky to 1.
For 2, the frequency is 2, and 2 == 2, so it's a lucky integer. But it's not greater than the current largest_lucky, so no update.
For 3, the frequency is 3, and 3 == 3, so it's a lucky integer. But it's not greater than the current largest_lucky, so no update.
For 4, the frequency is 4, and 4 == 4, so it's a lucky integer. Update largest_lucky to 4.
Step 4: Return the largest lucky integer found:

After the iteration, the variable largest_lucky holds the value 4, which is the largest lucky integer in the array.
The function returns 4.
