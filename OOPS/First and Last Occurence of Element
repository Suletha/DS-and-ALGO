You are Given an array Sorted in ascending order. Find the Starting and ending Position of a given Target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]


Example 2:
Input: nums = [5,7,7,8,8,8,8,8,8,10], target = 8
Output: [3,8]


Example 3:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]




class Solution:
    def element_search(self, nums: List[int], target: int) -> List[int]:
        def bin_left(nums, target):
            n = len(nums)-1
            l, r = 0, n
            while l <= r:
                mid = (l + r)//2
                if nums[mid] < target:
                    l = mid + 1
                else:
                    r = mid - 1
            return l
            
            
        def bin_right(nums, target):
            n = len(nums)-1
            l, r = 0, n
            while l <= r:
                mid = (l + r)//2
                if nums[mid] <= target:
                    l = mid + 1
                else:
                    r = mid - 1
            return r
            
        left_pos = bin_left(nums, target)
        right_pos = bin_right(nums, target)  
        
        if left_pos <= right_pos:
            return [left_pos,right_pos]
        else:
            return [-1,-1]
            
                 
        
            
       
        
       
