You are given a array with positive and negative numbers .

you have to find the part of the array i.e subarray which has addition 0 .

the output should be true if subarray present in array whose sum is 0 and return false if not.


Solve it in 0(n).

Example 1:

Input: 5 4 2 -3 1 6

Output: True

 Explanation: 2, -3, 1 is the subarray with sum 0.

Example 2:

Input: 5 4 2 0 1 6

Output: True

Explanation: 0 is one of the element in the array so there exist a subarray with sum 0.


class Solution:
    def is_twin(self, arr: List[int]) -> bool:
        cum_sum = set()
        current_sum = 0
        cum_sum.add(0)
        for i in arr:
            current_sum += i
            if current_sum in cum_sum:
                return True
            cum_sum.add(current_sum)
        return False
Example array: [4, 2, -3, 1, 6]

Step 1: Initialize variables

cumulative_sums: An empty set to store the cumulative sums.
current_sum: Initially set to 0, as the sum of an empty subarray is 0.
Add 0 to cumulative_sums since an empty subarray has a sum of 0.
Step 2: Traverse through the array

For each element in the array, update the current_sum by adding the element's value to it.
Check if the current_sum exists in the cumulative_sums set.
If current_sum exists in the set, it means that there is a subarray with a sum of 0. In this case, we can return True.
Iteration 1: num = 4

current_sum = 0 + 4 = 4
4 does not exist in cumulative_sums, so add it to the set.
Iteration 2: num = 2

current_sum = 4 + 2 = 6
6 does not exist in cumulative_sums, so add it to the set.
Iteration 3: num = -3

current_sum = 6 + (-3) = 3
3 does not exist in cumulative_sums, so add it to the set.
Iteration 4: num = 1

current_sum = 3 + 1 = 4
4 exists in cumulative_sums, so we found a subarray with a sum of 0, and we return True.
The function returns True because the subarray [2, -3, 1] has a sum of 0.

If we had an array without any subarray whose sum is 0, the function would return False. For example: [1, 2, 3, 4, 5].
