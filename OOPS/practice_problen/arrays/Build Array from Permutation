Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]




Sure, I can provide a step-by-step iterative process for building the ans array. Let's consider the example nums = [2, 0, 1, 4, 3].

Initialize an empty list ans.
ans = []

Iterate through the indices i from 0 to nums.length - 1 (i.e., 0 to 4).

i = 0:

Calculate ans[0] = nums[nums[0]] = nums[2] = 1
Append ans[0] to the list ans, so ans = [1]
i = 1:

Calculate ans[1] = nums[nums[1]] = nums[0] = 2
Append ans[1] to the list ans, so ans = [1, 2]
i = 2:

Calculate ans[2] = nums[nums[2]] = nums[1] = 0
Append ans[2] to the list ans, so ans = [1, 2, 0]
i = 3:

Calculate ans[3] = nums[nums[3]] = nums[4] = 3
Append ans[3] to the list ans, so ans = [1, 2, 0, 3]
i = 4:

Calculate ans[4] = nums[nums[4]] = nums[3] = 4
Append ans[4] to the list ans, so ans = [1, 2, 0, 3, 4]
The loop ends since we have iterated through all indices.

Return the ans list.

So, the final ans array will be [1, 2, 0, 3, 4], which is the result of applying the given transformation to the nums array.
