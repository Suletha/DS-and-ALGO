def find_max_ones_row(matrix):
    max_ones_row = -1
    max_ones_count = 0

    for i, row in enumerate(matrix):
        ones_count = sum(row)
        if ones_count > max_ones_count:
            max_ones_count = ones_count
            max_ones_row = i

    return max_ones_row

    First Iteration (i = 0):

Current Row: [0, 1, 1, 1]
Count of 1's: ones_count = sum([0, 1, 1, 1]) = 3
ones_count (3) is greater than max_ones_count (0), so update max_ones_count = 3 and max_ones_row = 0.
Second Iteration (i = 1):

Current Row: [0, 0, 1, 1]
Count of 1's: ones_count = sum([0, 0, 1, 1]) = 2
ones_count (2) is not greater than max_ones_count (3), no updates.
Third Iteration (i = 2):

Current Row: [0, 0, 1, 1]
Count of 1's: ones_count = sum([0, 0, 1, 1]) = 2
ones_count (2) is not greater than max_ones_count (3), no updates.
Fourth Iteration (i = 3):

Current Row: [0, 0, 0, 1]
Count of 1's: ones_count = sum([0, 0, 0, 1]) = 1
ones_count (1) is not greater than max_ones_count (3), no updates.
After iterating through all the rows, the function will return max_ones_row = 0, as the row [0, 1, 1, 1] (0-based index) has the maximum number of 1's, which is 3.
